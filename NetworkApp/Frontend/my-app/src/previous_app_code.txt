import logo from './logo.svg';
import './App.css';
import login from "./login";

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
      
    </div>
  );
}

export default App;


main.js previous 

import React from 'react';
import './css/main.css'; // Assuming the CSS is in the same folder

const Dashboard = () => {
  return (
    <div className="dashboard">
      {/* Navigation Bar */}
      <div className="navigation-bar">
        <div className="nav-title">5G NETWORKING<br />WEB DASHBOARD</div>
        <div className="nav-links">
          <span className="nav-item">TRAFFIC</span>
          <span className="nav-item">SETTINGS</span>
        </div>
      </div>

      {/* Bandwidth Graph Title */}
      <div className="bandwidth-header">
        <h2>Bandwidth by Application</h2>
        <div className="total-bandwidth">
          <p>Total Bandwidth</p>
          <span className="bmp">bmp</span>
        </div>
      </div>

      {/* Graph Placeholder */}
      <div className="time-series-graph">
        {/* Insert your graph component or image here */}
      </div>

      {/* Header Row */}
      <div className="row titles">
        <span>PORT NUMBER</span>
        <span>SPEED</span>
      </div>

      {/* Port Rows */}
      <div className="row port-row">
        <span>PORT NO.1</span>
        <span>SPEED-1</span>
      </div>

      <div className="row port-row">
        <span>PORT NO.2</span>
        <span>SPEED-2</span>
      </div>
    </div>
  );
};

export default Dashboard;


previous css for main
/* General Reset */
* {
    box-sizing: border-box;
  }
  
  body {
    margin: 0;
    background: #FFFFFF;
    padding: 0;
    height: auto;
    overflow-y: auto;
    
  }
  
  /* Dashboard Container */
  .dashboard {
    position: relative;
    height: 1268px;
    width: 1510px;
    border: 1px solid #000;
  }
  
  /* Navigation Bar */
  .navigation-bar {
    position: absolute;
    top: 0;
    left: 0;
    width: 1510px;
    height: 131px;
    background: #2F4182;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 50px;
  }
  
  .nav-title {
    color: #FFFFFF;
    font-family: 'Inter', sans-serif;
    font-size: 32px;
    font-weight: 400;
    line-height: 39px;
  }
  
  .nav-links {
    display: flex;
    gap: 50px;
  }
  
  .nav-item {
    color: #FFFFFF;
    font-family: 'Inter', sans-serif;
    font-size: 32px;
    font-weight: 400;
    line-height: 39px;
  }
  
  /* Bandwidth Title */
  .bandwidth-header {
    position: absolute;
    top: 159px;
    left: 827px;
  }
  
  .bandwidth-header h2 {
    position: absolute;
    top: 39px;
    left: -585px;
    font-family: 'Inter', sans-serif;
    font-size: 36px;
    font-weight: 700;
    line-height: 44px;
    color: #000000;
  }
  
  .total-bandwidth {
    position: relative;
    top: 59px;
    left: 9px;
    font-family: 'Inter', sans-serif;
    font-size: 32px;
    font-weight: 400;
    line-height: 39px;
    color: #000000;
  }
  
  .bmp {
    position: absolute;
    top: 59px;
    left: 166px;
    font-size: 24px;
    font-weight: 500;
    line-height: 29px;
  }
  
  /* Time Series Graph */
  .time-series-graph {
    position: absolute;
    width: 1104px;
    height: 292px;
    top: 283px;
    left: 203px;
    background: #FFFFFF;
    border: 1px solid #000;
  }
  
  /* Title Row */
  .row.titles {
    position: absolute;
    top: 616px;
    left: 80px;
    width: 1370px;
    height: 92px;
    border: 1px solid #000;
    display: flex;
    justify-content: space-between;
    padding: 30px 50px;
    font-family: 'Inter', sans-serif;
    font-size: 24px;
    font-weight: 500;
    line-height: 29px;
    color: #000;
  }
  
  /* Port Row 1 */
  .row.port-row:nth-of-type(1) {
    position: absolute;
    top: 744px;
    left: 80px;
    width: 1370px;
    height: 194px;
    display: flex;
    justify-content: space-between;
    padding: 60px 50px;
  }
  
  /* Port Row 2 */
  .row.port-row:nth-of-type(2) {
    position: absolute;
    top: 974px;
    left: 80px;
    width: 1370px;
    height: 201px;
    display: flex;
    justify-content: space-between;
    padding: 83px 50px;
    border: 1px solid #000;
  }
  
  /* Port Elements */
  .port-name, .port-speed {
    font-family: 'Inter', sans-serif;
    font-size: 24px;
    font-weight: 500;
    line-height: 29px;
    color: #000;
  }
  
  /* Optional Subclasses if needed */
  .port-name {
    width: 200px;
  }
  
  .port-time-series {
    width: 250px;
  }
  
  .port-bpm {
    width: 150px;
  }

  TRAFFIC js
  import React from 'react';
import './css/traffic.css';
import { Link } from 'react-router-dom';

const Traffic = () => {
    return (
        <div className="traffic">
            {/* Navigation Bar */}
            <div className="navigation-bar">
                <div className="nav-title">TRAFFIC</div>
                <div className="nav-links">
                    <Link to="/main" className="nav-item">Back</Link>
                </div>
            </div>
         </div>

    );

};
export default Traffic;


TEST PAGE ********
import React from 'react';
import './css/main.css';
import { useNavigate } from 'react-router-dom';


const Dashboard = () => {
  const navigate = useNavigate();
  const handleLogout = () => {
    localStorage.removeItem("auth");
    navigate("/"); // Redirect to login
  };
  
  return (
    <div className="test">
      {/* Navigation Bar */}
      <div className="navigation-bar">
        <div className="nav-title">5G NETWORKING<br />WEB DASHBOARD</div>
        <div className="nav-links">
          <span className="nav-item" onClick={handleLogout}>LOGOUT</span>
        </div>
      </div>
      <br />
      <br />
      <br />
      
      {/* Port Rows */}
      <div className="row port-row">
        <span>PORT NO.1</span>
        <span>SPEED-1</span>
      </div>

      <div className="row port-row">
        <span>PORT NO.2</span>
        <span>SPEED-2</span>
      </div>
      <button>
        Get Interface
      </button>
      <br />
      <button>
        Upload
      </button>
      <button>
        Download
      </button>
    </div>
  );
};

export default Dashboard;


CSS for TESTPAGE*******
/* General Reset */
* {
    box-sizing: border-box;
  }
  
  body {
    margin: 0;
    background: #FFFFFF;
    padding: 0;
    height: auto;
    overflow-y: auto;
  }
  
  /* traffic Container */
  .test {
    position: relative;
    height: 1268px;
    width: 1510px;
    border: 1px solid #000;
  }
  
  /* Navigation Bar */
  .navigation-bar {
    position: absolute;
    top: 0;
    left: 0;
    width: 1510px;
    height: 131px;
    background: #2F4182;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 50px;
  }
  
  .nav-title {
    color: #FFFFFF;
    font-family: 'Inter', sans-serif;
    font-size: 32px;
    font-weight: 400;
    line-height: 39px;
  }
  
  .nav-links {
    display: flex;
    gap: 50px;
  }
  
  .nav-item {
    color: #FFFFFF;
    font-family: 'Inter', sans-serif;
    font-size: 32px;
    font-weight: 400;
    line-height: 39px;
  }

  .row.port-row {
    position: relative;
    margin:125px auto;
    width: 1104px;
    height: 92px;
    display: flex;
    justify-content: space-around;
    padding: 30px 50px;
    border: 1px solid #000;
    border-radius: 8px;
    font-family: 'Inter', sans-serif;
    font-size: 24px;
    font-weight: 500;
    line-height: 29px;
    color: #000;
    background-color: #fff;
  }
  
  /* Port Elements */
  .port-name, .port-speed {
    font-family: 'Inter', sans-serif;
    font-size: 24px;
    font-weight: 500;
    line-height: 29px;
    color: #000;
  }



  TEST PAGE .js
  import React, { useState } from 'react';
import axios from 'axios';
import './css/test.css';
import { Link, useNavigate } from 'react-router-dom';

const TestPage = () => {
  const [portNames, setPortNames] = useState([]);
  // Example: { enp0s3: { bitrate: "12.45 Mbps" }, ... }
  const [uploadSpeeds, setUploadSpeeds] = useState({});
  const [downloadSpeeds, setDownloadSpeeds] = useState({});
  const [error, setError] = useState('');

  const backendUrl = 'http://localhost:8080'; // Change if backend is on another machine

  const getInterfaces = async () => {
    try {
      setError('');
      const response = await axios.get(`${backendUrl}/get-interfaces`);
      setPortNames(response.data.interfaces || []);
      setUploadSpeeds({});
      setDownloadSpeeds({});
    } catch (error) {
      setError('Error fetching interfaces: ' + error.message);
      setPortNames([]);
    }
  };

  // mode: "upload" or "download"
  const getSpeedData = async (mode) => {
    try {
      setError('');
      const speeds = {};
      for (const port of portNames) {
        const response = await axios.get(
          `${backendUrl}/get-speed-data?port=${port}&mode=${mode}`
        );
        speeds[port] = response.data; // expects { bitrate: "XX.XX Mbps" }
      }
      if (mode === 'upload') {
        setUploadSpeeds(speeds);
      } else {
        setDownloadSpeeds(speeds);
      }
    } catch (error) {
      setError('Error fetching speed data: ' + error.message);
      if (mode === 'upload') setUploadSpeeds({});
      if (mode === 'download') setDownloadSpeeds({});
    }
  };

  const displayBitrate = (port, mode) => {
    const speeds = mode === 'upload' ? uploadSpeeds : downloadSpeeds;
    if (speeds[port] && speeds[port].bitrate) {
      return speeds[port].bitrate;
    }
    return 'No data yet.';
  };
  const navigate = useNavigate();
  const handleLogout = () => {
    localStorage.removeItem("auth");
    navigate("/"); // Redirect to login
  };

  return (
    <div className="test">
      <div className="navigation-bar">
        <div className="nav-title">5G Dashboard</div>
        <div className="nav-links">
          <span className="nav-item" onClick={handleLogout}>LOGOUT</span>
        </div>
      </div>

      <div className="content-wrapper">
        <div className="button-section">
          <button className="action-button" onClick={getInterfaces}>Get Interface</button>
          <div className="row port-row">
            <div className="port-name"><strong>Port 1:</strong> {portNames[0] || 'N/A'}</div>
            <div className="port-name"><strong>Port 2:</strong> {portNames[1] || 'N/A'}</div>
          </div>
          <div className="button-group">
            <button className="action-btn" onClick={() => getSpeedData('upload')}>Upload Speed</button>
            <button className="action-btn" onClick={() => getSpeedData('download')}>Download Speed</button>
          </div>
        </div>
        {error && (
          <div style={{ color: 'red', margin: '10px 0' }}>{error}</div>
        )}
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          flexWrap: 'wrap',
          marginTop: '30px'
        }}>
          {[0, 1].map(i => (
            <React.Fragment key={i}>
              <div className="speed-box" style={{
                border: '1px solid #ddd',
                borderRadius: 10,
                padding: 16,
                width: '45%',
                marginBottom: 20,
                background: '#f7f7f7'
              }}>
                <div style={{ fontWeight: 'bold', marginBottom: 8 }}>
                  {portNames[i] || `Port ${i + 1}`} Upload Speed
                </div>
                <pre style={{ whiteSpace: 'pre-wrap' }}>
                  {portNames[i] ? displayBitrate(portNames[i], 'upload') : 'N/A'}
                </pre>
              </div>
              <div className="speed-box" style={{
                border: '1px solid #ddd',
                borderRadius: 10,
                padding: 16,
                width: '45%',
                marginBottom: 20,
                background: '#f7f7f7'
              }}>
                <div style={{ fontWeight: 'bold', marginBottom: 8 }}>
                  {portNames[i] || `Port ${i + 1}`} Download Speed
                </div>
                <pre style={{ whiteSpace: 'pre-wrap' }}>
                  {portNames[i] ? displayBitrate(portNames[i], 'download') : 'N/A'}
                </pre>
              </div>
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TestPage;


NetworkController.java 

package com.example.backend;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@CrossOrigin(origins = "*")
public class NetworkController {

    // Change this to your iperf3 server IP if not running locally
    private final String IPERF3_SERVER_IP = "89.187.162.1";

    @GetMapping("/get-interfaces")
    public Map<String, Object> getInterfaces() {
        Map<String, Object> result = new HashMap<>();
        try {
            ProcessBuilder pb = new ProcessBuilder("bash", "-c", "ifconfig | grep -Eo '^[a-zA-Z0-9]+' | grep -v lo | head -n 2");
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            List<String> ports = new ArrayList<>();
            String line;
            while ((line = reader.readLine()) != null) {
                ports.add(line.trim());
            }
            result.put("interfaces", ports);
        } catch (IOException e) {
            result.put("error", e.getMessage());
        }
        return result;
    }

    @GetMapping("/get-speed-data")
    public Map<String, String> getSpeedData(
            @RequestParam String port,
            @RequestParam String mode // "upload" or "download"
    ) {
        Map<String, String> result = new HashMap<>();
        try {
            // Get the local IP for the selected interface (port)
            String ipCommand = String.format("ip addr show %s | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1", port);
            Process ipProcess = new ProcessBuilder("bash", "-c", ipCommand).start();
            BufferedReader ipReader = new BufferedReader(new InputStreamReader(ipProcess.getInputStream()));
            String localIp = ipReader.readLine();
            if (localIp == null || localIp.isEmpty()) {
                result.put("output", "Could not get local IP for " + port);
                return result;
            }

            // Build iperf3 command
            String command = String.format(
                "iperf3 -c %s -B %s %s -J",
                IPERF3_SERVER_IP,
                localIp,
                "download".equals(mode) ? "-R" : ""
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", command);
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                // Parse iperf3 JSON and extract only the main interval bitrate
                try {
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode root = mapper.readTree(output.toString());

                    double bitsPerSecond = 0;
                    if (root.has("end") && root.get("end").has("sum_sent")) {
                        // Upload: client to server
                        bitsPerSecond = root.get("end").get("sum_sent").get("bits_per_second").asDouble();
                    } else if (root.has("end") && root.get("end").has("sum_received")) {
                        // Download: server to client (reverse)
                        bitsPerSecond = root.get("end").get("sum_received").get("bits_per_second").asDouble();
                    }
                    double mbps = bitsPerSecond / 1_000_000.0;

                    result.put("bitrate", String.format("%.2f Mbps", mbps));
                } catch (Exception e) {
                    result.put("output", "Error parsing iperf3 JSON: " + e.getMessage());
                }
            } else {
                result.put("output", "iperf3 failed with exit code " + exitCode + "\n" + output.toString());
            }
        } catch (Exception e) {
            result.put("output", "Error: " + e.getMessage());
        }
        return result;
    }
}


TESTPAGE.js part2
import React, { useState } from 'react';
import axios from 'axios';
import './css/test.css';
import { useNavigate } from 'react-router-dom';

const TestPage = () => {
  const [portNames, setPortNames] = useState([]);
  const [uploadSpeeds, setUploadSpeeds] = useState({});
  const [downloadSpeeds, setDownloadSpeeds] = useState({});
  const [error, setError] = useState('');
  const [trafficDestinations, setTrafficDestinations] = useState([]);

  const backendUrl = 'http://localhost:8080'; // Adjust if needed

  const getInterfaces = async () => {
    try {
      setError('');
      const response = await axios.get(`${backendUrl}/get-interfaces`);
      setPortNames(response.data.interfaces || []);
      setUploadSpeeds({});
      setDownloadSpeeds({});
    } catch (error) {
      setError('Error fetching interfaces: ' + error.message);
      setPortNames([]);
    }
  };

  const getSpeedData = async (mode) => {
    try {
      setError('');
      const speeds = {};
      for (const port of portNames) {
        const response = await axios.get(`${backendUrl}/get-speed-data?port=${port}&mode=${mode}`);
        speeds[port] = response.data;
      }
      if (mode === 'upload') {
        setUploadSpeeds(speeds);
      } else {
        setDownloadSpeeds(speeds);
      }
    } catch (error) {
      setError('Error fetching speed data: ' + error.message);
      if (mode === 'upload') setUploadSpeeds({});
      if (mode === 'download') setDownloadSpeeds({});
    }
  };

  const runTrafficAnalysis = async () => {
    try {
      setError('');
      const response = await axios.get(`${backendUrl}/traffic-analysis`);
      setTrafficDestinations(response.data.destinations || []);
    } catch (error) {
      setError('Error running traffic analysis: ' + error.message);
      setTrafficDestinations([]);
    }
  };

  const displayBitrate = (port, mode) => {
    const speeds = mode === 'upload' ? uploadSpeeds : downloadSpeeds;
    if (speeds[port] && speeds[port].bitrate) {
      return speeds[port].bitrate;
    }
    return 'No data yet.';
  };

  const navigate = useNavigate();
    const handleLogout = () => {
      localStorage.removeItem("auth");
      navigate("/"); // Redirect to login
    };

  return (
    <div className="test">
      <div className="navigation-bar">
        <div className="nav-title">5G Dashboard</div>
        <div className="nav-links">
          <span className="nav-item" onClick={handleLogout}>LOGOUT</span>
        </div>
      </div>

      <div className="content-wrapper">
        <div className="button-section">
          <button className="action-button" onClick={getInterfaces}>Get Interface</button>
          <div className="row port-row">
            <div className="port-name"><strong>Port 1:</strong> {portNames[0] || 'N/A'}</div>
            <div className="port-name"><strong>Port 2:</strong> {portNames[1] || 'N/A'}</div>
          </div>
          <div className="button-group">
            <button className="action-btn" onClick={() => getSpeedData('upload')}>Upload Speed</button>
            <button className="action-btn" onClick={() => getSpeedData('download')}>Download Speed</button>
          </div>
        </div>

        {error && (
          <div style={{ color: 'red', margin: '10px 0' }}>{error}</div>
        )}

        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          flexWrap: 'wrap',
          marginTop: '30px'
        }}>
          {[0, 1].map(i => (
            <React.Fragment key={i}>
              <div className="speed-box" style={{
                border: '1px solid #ddd',
                borderRadius: 10,
                padding: 16,
                width: '45%',
                marginBottom: 20,
                background: '#f7f7f7'
              }}>
                <div style={{ fontWeight: 'bold', marginBottom: 8 }}>
                  {portNames[i] || `Port ${i + 1}`} Upload Speed
                </div>
                <pre style={{ whiteSpace: 'pre-wrap' }}>
                  {portNames[i] ? displayBitrate(portNames[i], 'upload') : 'N/A'}
                </pre>
              </div>
              <div className="speed-box" style={{
                border: '1px solid #ddd',
                borderRadius: 10,
                padding: 16,
                width: '45%',
                marginBottom: 20,
                background: '#f7f7f7'
              }}>
                <div style={{ fontWeight: 'bold', marginBottom: 8 }}>
                  {portNames[i] || `Port ${i + 1}`} Download Speed
                </div>
                <pre style={{ whiteSpace: 'pre-wrap' }}>
                  {portNames[i] ? displayBitrate(portNames[i], 'download') : 'N/A'}
                </pre>
              </div>
            </React.Fragment>
          ))}
        </div>

        <div style={{ textAlign: 'center', marginTop: '30px' }}>
          <button className="action-btn" onClick={runTrafficAnalysis}>
            Traffic Analysis
          </button>
          {trafficDestinations.length > 0 && (
            <div className="traffic-output" style={{ marginTop: '20px' }}>
              <h3>Destination IPs Captured:</h3>
              <ul>
                {trafficDestinations.map((ip, index) => (
                  <li key={index}>{ip}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TestPage;

NetworkController.java part 2
package com.example.backend;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.LinkedHashSet;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@CrossOrigin(origins = "*")
public class NetworkController {

    private final String IPERF3_SERVER_IP = "89.187.162.1";

    @GetMapping("/get-interfaces")
    public Map<String, Object> getInterfaces() {
        Map<String, Object> result = new HashMap<>();
        try {
            ProcessBuilder pb = new ProcessBuilder("bash", "-c", "ifconfig | grep -Eo '^[a-zA-Z0-9]+' | grep -v lo | head -n 2");
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            List<String> ports = new ArrayList<>();
            String line;
            while ((line = reader.readLine()) != null) {
                ports.add(line.trim());
            }
            result.put("interfaces", ports);
        } catch (IOException e) {
            result.put("error", e.getMessage());
        }
        return result;
    }

    @GetMapping("/get-speed-data")
    public Map<String, String> getSpeedData(@RequestParam String port, @RequestParam String mode) {
        Map<String, String> result = new HashMap<>();
        try {
            String ipCommand = String.format("ip addr show %s | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1", port);
            Process ipProcess = new ProcessBuilder("bash", "-c", ipCommand).start();
            BufferedReader ipReader = new BufferedReader(new InputStreamReader(ipProcess.getInputStream()));
            String localIp = ipReader.readLine();
            if (localIp == null || localIp.isEmpty()) {
                result.put("output", "Could not get local IP for " + port);
                return result;
            }

            String command = String.format(
                "iperf3 -c %s -B %s %s -J",
                IPERF3_SERVER_IP,
                localIp,
                "download".equals(mode) ? "-R" : ""
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", command);
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                try {
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode root = mapper.readTree(output.toString());
                    double bitsPerSecond = 0;
                    if (root.has("end") && root.get("end").has("sum_sent")) {
                        bitsPerSecond = root.get("end").get("sum_sent").get("bits_per_second").asDouble();
                    } else if (root.has("end") && root.get("end").has("sum_received")) {
                        bitsPerSecond = root.get("end").get("sum_received").get("bits_per_second").asDouble();
                    }
                    double mbps = bitsPerSecond / 1_000_000.0;
                    result.put("bitrate", String.format("%.2f Mbps", mbps));
                } catch (Exception e) {
                    result.put("output", "Error parsing iperf3 JSON: " + e.getMessage());
                }
            } else {
                result.put("output", "iperf3 failed with exit code " + exitCode + "\n" + output.toString());
            }
        } catch (Exception e) {
            result.put("output", "Error: " + e.getMessage());
        }
        return result;
    }

    @GetMapping("/traffic-analysis")
    public Map<String, Object> getTrafficAnalysis() {
        Map<String, Object> result = new HashMap<>();
        try {
            String command = "timeout 5 tcpdump -i any -n";
            ProcessBuilder pb = new ProcessBuilder("bash", "-c", command);
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            Set<String> destinations = new LinkedHashSet<>();
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains(">")) {
                    String[] parts = line.split(" > ");
                    if (parts.length > 1) {
                        String right = parts[1].split(":")[0].trim();
                        destinations.add(right);
                    }
                }
            }
            result.put("destinations", destinations);
        } catch (IOException e) {
            result.put("error", e.getMessage());
        }
        return result;
    }
}